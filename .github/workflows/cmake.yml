name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    container:
      image: docker://yangyw12345/cs131-grader
   
    steps: 
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build-PA1
      if: always()
      # Build your program with the given configuration
      run: make -C ${{github.workspace}}/build cjson_formatter && make -C ${{github.workspace}}/build parser

    - name: Test-PA1
      if: always()
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: bash -c 'cd ${{github.workspace}}/build && python /root/chocopy_test/duipai.py --pa 1'

    - name: Build-PA2
      if: always()
      # Build your program with the given configuration
      run: make -C ${{github.workspace}}/build cjson_formatter && make -C ${{github.workspace}}/build semantic
      
    - name: Test-PA2
      if: always()
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: bash -c 'cd ${{github.workspace}}/build && python /root/chocopy_test/duipai.py --pa 2'

    - name: Build-PA3
      if: always()
      # Build your program with the given configuration
      run: make -C ${{github.workspace}}/build ir-optimizer
      
    - name: Test-PA3
      if: always()
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: bash -c 'cd ${{github.workspace}}/build && python /root/chocopy_test/duipai.py --pa 3'
  
    - name: Build-PA4
      if: always()
      # Build your program with the given configuration
      run: make -C ${{github.workspace}}/build cgen
      
    - name: Test-PA4
      if: always()
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: bash -c 'cd ${{github.workspace}}/build && python /root/chocopy_test/duipai.py --pa 4'
    
    
    
      
